package {{ .APIPackage }}

import (
  "log"

  middleware "github.com/go-openapi/runtime/middleware"

  {{range .DefaultImports}}{{printf "%q" .}}
  {{end}}
  {{range $key, $value := .Imports}}{{$key}} {{ printf "%q" $value}}
  {{end}}
)
{{ $package := .Package }}

func configureViews(api *{{.Package}}.{{ pascalize .Name }}API) {
  {{range .Operations}}api.{{if ne .Package $package}}{{pascalize .Package}}{{end}}{{ pascalize .Name }}Handler = {{.Package}}.{{ pascalize .Name }}HandlerFunc(func({{ if .WithContext }}ctx context.Context, {{ end }}params {{.Package}}.{{ pascalize .Name }}Params{{if .Authorized}}, principal {{if not ( eq .Principal "interface{}" )}}*{{ end }}{{.Principal}}{{end}}) middleware.Responder {
    {{ $workflow := (index .Extensions "x-workflow") }}
    {{if $workflow}}
    var_map, err := params.GetParamsMap()
    log.Println("[INFO] Request received for {{if ne .Package $package}}{{ .Package}}{{end}}.{{pascalize .Name}}, params: ", var_map)
    if err != nil {
      log.Println("[WARN] Failed to parse params for request. Error: ", err)
      {{ $failfound := false }}
      {{ $failresponse := .SuccessResponse }}
      {{ range .Responses }}
      {{ if eq .Code 400 }}
      {{ $failfound := true }}
      {{ $failresponse := . }}
      return &operations.{{ pascalize .Name }}{
      }
      {{ end }}
      {{ end }}
      {{ if not $failfound }}
      {{ range .Responses }}
      {{ if and (ge .Code 400) (lt .Code 500) }}
      {{ $failfound := true }}
      {{ $failresponse := . }}
      return &operations.{{ pascalize .Name }}{
      }
      {{ end }}
      {{ end }}
      {{ end }}
      {{ if not $failfound }}
      {{ range .Responses }}
      {{ if and (ge .Code 200) (lt .Code 300) }}
      {{ $failfound := true }}
      {{ $failresponse := . }}
      return &operations.{{ pascalize .Name }}{
      }
      {{ end }}
      {{ end }}
      {{ end }}
    }

    resp := workflows.{{ pascalize $workflow }}(&var_map).(map[string]interface{})

    status_code, _ := resp["status_code"].(int64)

    switch status_code {
    {{ range .Responses }}
    case {{.Code}}:
      return &operations.{{ pascalize .Name }}{
        Payload: resp["body"],
      }{{ end }}
    default:
      return &operations.{{ pascalize $failresponse.Name }}{
      }
    }
    {{ else }}
    return middleware.NotImplemented("operation {{if ne .Package $package}}{{ .Package}}{{end}}.{{pascalize .Name}} has not yet been implemented")
    {{ end }}
  })
  {{end}}
}
