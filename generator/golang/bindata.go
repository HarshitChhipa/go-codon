// Code generated by go-bindata.
// sources:
// generator/golang/content/clients/clients.gofile
// DO NOT EDIT!

package golang

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _clientsClientsGofile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\x41\x4b\xf3\x40\x10\x86\xcf\x5f\x7e\xc5\x10\x72\x68\xa1\x5f\x72\x17\x7a\x2a\x52\x3d\x58\x3d\x54\x3c\xca\x9a\x4c\xb6\x43\x9b\xd9\xb0\xbb\xa9\xca\x30\xff\x5d\x92\x6d\xaa\xe8\x2d\x61\x66\x9e\xe7\xdd\xb7\x37\xf5\xd1\x58\x84\xfa\x44\xc8\x31\x64\x19\x75\xbd\xf3\x11\x16\xd9\x3f\x11\x6a\xa1\xdc\x4c\x83\x5b\x6e\x7a\x47\x1c\x83\x6a\xed\xb8\x25\x0b\xb9\xa5\x78\x18\xde\xca\xda\x75\x95\xf5\xae\x45\x1f\x2a\xeb\xfe\xd7\xae\x71\x5c\xf9\x81\x23\x75\x58\xa5\xdd\x5c\x04\xb9\x51\x1d\x91\xe0\x0d\x5b\x84\x22\xf9\x56\x50\x0c\x01\x1b\xb8\x59\xcf\xa2\xf0\x3c\xfe\xa7\x5d\x6a\xd3\x58\x55\xe4\x72\xa0\xfa\x9a\x3e\x20\x17\x01\xe2\x06\x3f\xa0\xb8\x9c\xde\x4f\xc9\xc3\xcc\x06\xd5\x59\x3c\xfb\x97\x59\xf6\x9d\xe0\x88\x9f\x2b\x28\xce\xe6\x34\xe0\x0f\xff\xf5\xa1\x63\x86\xb3\xf1\xf0\x47\x33\x6f\x6c\xdd\xce\x74\x18\x26\x10\xa8\xc2\x1a\x44\x12\xae\xfc\x95\xb5\xdc\xe1\xfb\xdd\x7e\xff\x94\xee\x5f\x28\x1e\x36\x53\x2f\x0f\xa6\x5f\x30\x9d\x56\x90\x6a\x2a\xb7\x78\x85\x2f\x72\x91\x11\xac\x9a\x2f\x97\xe5\x63\x8f\xde\x44\x72\x1c\x44\x00\x79\xea\xe7\x2b\x00\x00\xff\xff\x36\xd6\x6a\xae\xb9\x01\x00\x00")

func clientsClientsGofileBytes() ([]byte, error) {
	return bindataRead(
		_clientsClientsGofile,
		"clients/clients.gofile",
	)
}

func clientsClientsGofile() (*asset, error) {
	bytes, err := clientsClientsGofileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "clients/clients.gofile", size: 441, mode: os.FileMode(436), modTime: time.Unix(1492621608, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"clients/clients.gofile": clientsClientsGofile,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"clients": &bintree{nil, map[string]*bintree{
		"clients.gofile": &bintree{clientsClientsGofile, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

